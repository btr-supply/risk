# BTR Risk - Cursor IDE Rules

## Project Context
BTR Risk is a React 19 financial risk modeling application with Material-UI v7, focusing on performance and reusability.

## Tech Stack
- **Runtime**: **Bun scripting, Next.js development**
- **Framework**: React 19 + Next.js 15 + App Router
- **UI**: Material-UI v7 + Emotion + Chart.js + AsciiMath (AsciiMath2ml)
- **State**: Context API + Zustand/Immer
- **Quality**: Oxlint + Next.js ESLint + Prettier + JavaScript only

## Bun Requirements
- **Always use**: `bun install`, `bun run dev`, `bun run build`, `bun serve`

## Performance Rules
- Use `React.memo()` for stable props
- Use `useMemo()` for expensive calculations
- Use `useCallback()` for event handlers
- Use `React.lazy()` for route splitting
- Debounce rapid updates (sliders, inputs...)
- Memoize chart data and theme utilities
- Centralize state with Context API + useReducer
- Preload fonts in layout.jsx, use `useLoadingStore` for transitions

## Path Aliases
**ALWAYS use aliases instead of relative imports**

| Alias | Path | Use For |
|-------|------|---------|
| `@/` | `./src/` | Root source |
| `@components/` | `./src/components/` | React components |
| `@hooks/` | `./src/hooks/` | Custom hooks |
| `@store/` | `./src/store/` | State management |
| `@utils/` | `./src/utils/` | Utilities |
| `@constants/` | `./src/constants/` | Constants/themes |
| `@pages/` | `./src/components/pages/` | Page components |

```javascript
// ✅ Good - Import organization with aliases
import React, { memo, useMemo } from 'react';
import { Box, Typography } from '@mui/material';
import { useRiskModel } from '@store';
import { formatBp } from '@utils/format';
import { BaseCard } from '@components/BaseCard';
```

## Component Guidelines
- Keep components under 200 lines
- Extract logic to custom hooks
- Use composition over monoliths
- Wrap charts with `React.memo`
- Use theme utilities and style factories
- Tree-shake MUI: `import { Box } from '@mui/material'` ✅

## File Naming
- Components: `PascalCase.jsx`
- Hooks: `camelCase.js` (starting with 'use')
- Utilities: `camelCase.js`

## Quick Examples

```javascript
// ✅ Memoized component
export const Card = memo(({ title, children }) => {
  const icon = useMemo(() => getIcon(title), [title]);
  return <BaseCard>{children}</BaseCard>;
});

// ✅ Performance hook
export const useWeights = () => {
  const { model } = useRiskModel();
  return useMemo(() => calculate(model), [model]);
};

// ✅ Lazy loading
const Page = lazy(() => import('@pages/AllocationModel'));
```

## Anti-Patterns ❌
- `import * as MUI from '@mui/material'` (use selective imports)
- Inline complex styles without memoization
- Large components (>200 lines)
- Boilerplate redundancy (styles/utils/components...)
- Missing memo/useMemo for expensive operations/states

## Context
BTR Risk is a risk modeling and visualization app with allocation models, liquidity calculations, mathematical formulas (AsciiMath), and interactive charts (Chart.js). Always memoize/cache expensive financial computations.

## Deployment
- Static export to Cloudflare Pages via `public/_headers` (security/caching) and `public/_redirects` (SPA routing)
- Supplements Cloudflare dashboard configuration
